# TODO: Make this also work with other hosts

# TODO: For some reason, frotend docker container gets blocked by CORS... fix it

- name: Database container
  hosts: db
  tasks:
    - name: Save db's address
      ansible.builtin.debug:
        var: ansible_all_ipv4_addresses
      register: db_ip

    - name: Ensure docker is installed
      ansible.builtin.apt:
        name:
          - docker.io
          - apt-transport-https
          - ca-certificates
          - python3-docker
          - python3
        update_cache: true
      become: true
      become_user: root

    - name: Start the docker service
      ansible.builtin.service:
        name: docker
        state: started
      become: true
      become_user: root

    - name: Run the PostgreSQL docker image
      community.docker.docker_container:
        name: docker_db
        image: postgres:15
        state: started
        env:
          POSTGRES_USER: "dev"
          POSTGRES_PASSWORD: "dev"
          POSTGRES_DB: "db"
        ports:
          - 5432:5432
      become: true
      become_user: root

- name: Build backend docker image
  hosts: backend
  tasks:
    - name: Ping my hosts
      ansible.builtin.ping:

    - name: Print message
      ansible.builtin.debug:
        msg: Hello world

    - name: Ensure docker is installed
      ansible.builtin.apt:
        name:
          - docker.io
          - apt-transport-https
          - ca-certificates
          - python3-docker
          - python3
        update_cache: true
      become: true
      become_user: root

    - name: Start the docker service
      ansible.builtin.service:
        name: docker
        state: started
      become: true
      become_user: root

    - name: Print db_ip
      ansible.builtin.debug:
        msg: "db_ip is {{ hostvars['db']['db_ip'].ansible_all_ipv4_addresses[0] }}"

    - name: Clone backend repo
      ansible.builtin.git:
        repo: https://github.com/jgenc/hua-distributed-project-backend
        clone: true
        update: true
        dest: "{{ backend_workspace }}"

    - name: Copying env file
      ansible.builtin.command: "cp {{ backend_workspace }}/.env.example {{ backend_workspace }}/.env"
      register: dotenv_copy_cmd_output
      changed_when: dotenv_copy_cmd_output != 0

    - name: Changing PostgreSQL URI in .env.example to correspond to DB's IP
      ansible.builtin.lineinfile:
        path: "{{ backend_workspace }}/.env"
        regexp: "^DB_IP="
        line: "DB_IP={{ hostvars['db']['db_ip'].ansible_all_ipv4_addresses[0] }}"

    - name: Build backend docker image
      community.docker.docker_image:
        name: backend
        source: build
        build:
          dockerfile: backend.dockerfile
          path: "{{ backend_workspace }}"
          args:
            listen_port: 8000
          rm: true
      become: true
      become_user: root

- name: Migrating data
  hosts: backend
  tasks:
    - name: Migrate data
      community.docker.docker_container:
        name: backend-migrate
        image: backend
        command: bash -c "cd app && alembic upgrade head"
      become: true
      become_user: root

- name: Run the backend docker container
  hosts: backend
  tasks:
    - name: Run the backend docker image
      community.docker.docker_container:
        name: backend
        image: backend
        state: started
        ports:
          - 8000:8000
      become: true
      become_user: root
